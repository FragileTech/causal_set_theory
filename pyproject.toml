[project]
name = "causet"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "jupyter>=1.1.1",
    "matplotlib>=3.10.3",
    "nbconvert>=7.16.6",
    "notebook>=7.4.4",
    "numpy>=2.3.1",
    "seaborn>=0.13.2",
    "autoapi",
    "jupyter-book",
    "sphinx",
    "linkify-it-py",
    "myst-parser",
    "myst-nb",
    "ruyaml",
    "sphinx-autoapi",
    "pydata-sphinx-theme",
    "sphinx-autodoc2",
    "sphinxcontrib-mermaid",
    "sphinx_book_theme",
    "sphinx_rtd_theme",
    "jupyter-cache",
    "sphinx-copybutton",
    "sphinx-togglebutton",
    "sphinxext-opengraph",
    "sphinxcontrib-bibtex",
    "scipy>=1.16.0",
    "networkx>=3.5",
    "bokeh>=3.7.3",
    "holoviews>=1.21.0",
    "hvplot>=0.11.3",
    "python-louvain>=0.16",
]

[dependency-groups]
dev = [
    "ruff>=0.12.0",
    "pytest>=8.3.5,<9.0.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "mypy>=1.16.1",
    "types-pyyaml>=6.0.12.20250516",
    "jupyter>=1.1.1,<2.0.0",
    "notebook>=7.3.2,<8.0.0",
    "jupyter-bokeh>=4.0.5,<5.0.0",
    "pre-commit>=4.2.0",
]

#[project.scripts]
#causet = "causet.__main__:cli"

[tool.hatch.version]
path = "src/causet/version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/causet"]

[tool.ruff]
# Assume Python 3.12
target-version = "py312"
preview = true
line-length = 99
include = ["*.py", "*.pyi", "**/pyproject.toml"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "output",
    "venv",
    "experimental",
    ".pytest_cache",
    "**/.ipynb_checkpoints/**",
    "**/proto/**",
    "data",
    "config",
    "docs/conf.py",  # Autogenerated by jupyter-book
]

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "ARG", # Checks for unused function arguments.
    "C4", # Rules from flake8-comprehensions, for unnecessary comprehensions.
    "E", # Pycodestyle error rules.
    "EM", # Rules from flake8-errmsg, for raw strings in exceptions.
    "F", # Pyflakes rules, for detecting errors in Python programs.
    "FBT", # Rules from flake8-boolean-trap, for boolean positional arguments.
    "FLY", # Rules from flynt, for converting string formatting to f-strings.
    "FIX", # Rules from flake8-fixme, for flagging FIXME, TODO, etc. comments.
    "FURB", # Rules from refurb, for refurbishing code with better practices.
    "N", # Rules from pep8-naming, for enforcing naming conventions.
    #"NPY", # NumPy-specific rules.
    "INP", # Rules from flake8-no-pep420, for implicit namespace packages.
    "ISC", # Rules from flake8-implicit-str-concat, for implicit string concatenation.
    "PERF", # Rules from Perflint, for performance-related issues.
    "PIE", # Rules from flake8-pie, for various simplifications and improvements.
    "PL", # Pylint rules.
    #"PTH", # Rules from flake8-use-pathlib, for using pathlib instead of os.path.
    "RET", # Rules from flake8-return, for checking return statements.
    "RUF", # Ruff-specific rules.
    "S", # Rules from flake8-bandit, for finding security issues.
    "T10", # Rules from flake8-debugger, for finding debugger imports.
    "TD", # Rules from flake8-todos, for checking TODO comments.
    "T20", # Rules from flake8-print, for finding print statements.
    "UP", # Rules from pyupgrade, for upgrading syntax to newer versions.
    "YTT", # Rules from flake8-2020, for detecting deprecated Python 2 idioms.
    "W", # Pycodestyle warning rules.
    "I", # isort rules, for sorting imports.
]
ignore = [
    "ISC001", # Implicit string concatenation is not allowed. This si required for the formatterto work.
    "FIX002", # Line contains TODO, consider resolving the issue.
    "TD001", # Invalid TODO tag.
    "TD002", # Missing author in TODO.
    "FIX001", # Line contains FIXME, consider resolving the issue.
    "TD003", # Missing issue link for this TODO.
    "FIX004", # Line contains HACK, consider resolving the issue.
    "PLR0913", # Too many arguments in function definition.
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`.
    "PTH123", # `open()` should be replaced by `Path.open()`.
    "PLR6301", # Method could be a function, class method, or static method.
    "PLR0917", # Too many positional arguments.
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes.
    "S403", # `pickle`, `cPickle`, `dill`, and `shelve` modules are possibly insecure.
    "PLR0914", # Too many local variables.
    "PLR0915", # Too many statements.
    "T201", # `print` found.
    "D", # Disable all docstring rules until the project is in shape.
    "S301", # Using pickle is a potential security risk.
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "N803", # Argument name should be lowercase.
    "N806", # Variable `IQR` in function should be lowercase
    "FURB103",  # `open` and `write` should be replaced by `Path(output).write_text(tpl, encoding="utf-8")`
    "RUF003",  # Comment contains ambiguous `σ` (GREEK SMALL LETTER SIGMA)
    "UP046", # uses `Generic` subclass instead of type parameters
    "N802", # Function name should be lowercase.
    "RUF002", # Docstring contains ambiguous `α` (GREEK SMALL LETTER ALPHA).
    "PLR2004", # Magic value used in comparison.
#    Once the docstrings are in shape, we can enable these rules:
#    "D100", # Missing docstring in public module.
#    "D211", # No blank lines allowed before class docstring.
#    "D213", # Multi-line docstring summary should start at the second line.
#    "D104", # Missing docstring in public package.
#    "D203", # 1 blank line required before class docstring.
#    "D301", # Use r""" if any backslashes in a docstring.
#    "D407", # Missing dashed underline after section
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
scipy = "sp"
holoviews = "hv"
panel = "pn"
polars = "pl"
"polars.selectors" = "cs"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402", # Module level import not at top of file
    "F401", # Imported but unused
]
"cli.py" = [
    "PLC0415", # Import should be at module level
    "D205", # 1 blank line required between summary and description
    "D400", # First line should end with period
    "D415", # First line should end with period question mark or exclamation mark
]
"**/docs/**" = [
    "INP001", # File is part of an implicit namespace package
    "PTH100", # `os.path.abspath()` should be replaced by `Path.resolve()`
]
"**/{tests,docs}/*" = [
    "E402", # Module level import not at top of file
    "F401", # Imported but unused
    "F811", # Redefined while unused
    "D", # All docstring rules
    "S101", # Use of `assert` detected
    "PLR2004", # Magic value used in comparison
    "S105", # Possible hardcoded password
    "PLW1514", # `open` without explicit `encoding` argument
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PTH107", # `os.remove()` should be replaced by `Path.unlink()`
    "N811", # Constant imported as non-constant
    "PLC0415", # Import should be at module level
    "ARG002", # Unused method argument
]
"**/scripts/**" = [
    "INP001", # File is part of an implicit namespace package. Add an `__init__.py`
    "PLW0604", # `global` at module level is redundant
    "PLW0603", # Using the global statement to update `args` is discouraged
    "PLW0602", # Using global for `args` but no assignment is done
]
"**/minile/**"= ["ALL"] # Disable all rules for experimental code
"**/circuit/**"= ["ALL"] # Disable all rules for experimental code
"**/data_pipeline/**"= ["ALL"] # Disable all rules for experimental code
"**/encoding/**"= ["ALL"] # Disable all rules for experimental code
"**/game/**"= ["ALL"] # Disable all rules for experimental code
"**/learning/**"= ["ALL"] # Disable all rules for experimental code

# Enable reformatting of code snippets in docstrings.
[tool.ruff.format]
docstring-code-line-length = 80
docstring-code-format = true
indent-style = "space"
line-ending = "auto"
preview = true
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
known-first-party = ["causet"]
forced-separate = ["conftest"]
force-single-line = false
order-by-type = false
force-sort-within-sections = true
combine-as-imports = true
lines-after-imports = 2
detect-same-package = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
files = ["src/causet", "tests"]
exclude = [
    "docs/conf.py",
]
disallow_untyped_defs = false
follow_imports = "normal" # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.pylint.master]
ignore = 'tests'
load-plugins =' pylint.extensions.docparams'

[tool.pylint.messages_control]
disable = 'all,'
enable = """,
         missing-param-doc,
         differing-param-doc,
         differing-type-doc,
         missing-return-doc,
         """
[tool.ty.src]
include = ["src", "tests"]
exclude = [
    "docs/conf.py",
]
[tool.pytest.ini_options]
# To disable a specific warning --> action:message:category:module:line
filterwarnings = ["ignore::UserWarning", 'ignore::DeprecationWarning']
addopts = "--ignore=scripts --doctest-continue-on-failure  --capture=no"
python_files = ["test_*.py", "tests.py", "test.py"]
log_cli = 'true'
log_cli_level= "INFO"

# Code coverage config
[tool.coverage.run]
branch = true
source = ["src/causet"]
omit = [
    "version.py",  # automatically created by hatch-vcs, not in repo
]
[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
omit = ["tests/*"]

